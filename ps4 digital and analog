

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
	set();
	led2 = 0;
	led3 = 0;
	char msg[50];

	while(1){
		//HAL_UART_Transmit(&huart2, ".", 1, HAL_MAX_DELAY);
		if((ps4.button & CIRCLE) == CIRCLE )
		{
			HAL_UART_Transmit(&huart2,"CIRCLE", 6, 100);
		}
		if((ps4.button & TRIANGLE) == TRIANGLE )
		{
			HAL_UART_Transmit(&huart2,"TRIANGLE",8,100);
		}
		if((ps4.button & SQUARE) == SQUARE )
		{
			HAL_UART_Transmit(&huart2,"SQUARE",6,100);
		}
		if((ps4.button & CROSS) == CROSS )
		{
			HAL_UART_Transmit(&huart2,"CROSS",5,100);
		}
		if((ps4.button & UP) == UP )
		{
			HAL_UART_Transmit(&huart2,"UP",2,100);
		}
		if((ps4.button & DOWN) == DOWN )
		{
			HAL_UART_Transmit(&huart2,"DOWN",4,100);
		}
		if((ps4.button & LEFT) == LEFT )
		{
			HAL_UART_Transmit(&huart2,"LEFT",4,100);
		}
		if((ps4.button & RIGHT) == RIGHT )
		{
			HAL_UART_Transmit(&huart2,"RIGHT",5,100);
		}
		if((ps4.button & L1) == L1 )
		{
			HAL_UART_Transmit(&huart2,"L1",2,100);
		}
		if((ps4.button & R1) == R1 )
		{
			HAL_UART_Transmit(&huart2,"R1",2,100);
		}

		//analog L2 and R2
		if(ps4.joyL_2 > 0)
		{
			sprintf(msg,"L2 raw value = %f\n",ps4.joyL_2);
			HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),100);
		}
		if(ps4.joyR_2 > 0)
		{
			sprintf(msg,"R2 raw value = %f\n",ps4.joyR_2);
			HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),100);
		}

		//joystick
		if(ps4.joyL_x || ps4.joyL_y)
		{
			sprintf(msg,"left joystick raw value, x = %f, y = %f\n",ps4.joyL_x,ps4.joyL_y);
			HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),100);
		}
		if(ps4.joyR_x || ps4.joyR_y )
		{
			sprintf(msg,"right joystick raw value, x = %f, y = %f\n",ps4.joyR_x,ps4.joyR_y);
			HAL_UART_Transmit(&huart2,(uint8_t *)msg,strlen(msg),100);
		}

		//combination
//		if(ps4.button == L1_LEFT )
//		{
//			HAL_UART_Transmit(&huart2,"L1 + LEFT\n",10, 100);
//		}
//		if(ps4.button == L1_RIGHT )
//		{
//				HAL_UART_Transmit(&huart2,"L1 + RIGHT\n",11,100);
//		}
//		if(ps4.button == L1_UP )
//		{
//			HAL_UART_Transmit(&huart2,"L1 + UP\n",8,100);
//		}
//		if(ps4.button == L1_DOWN )
//		{
//			HAL_UART_Transmit(&huart2,"L1 + DOWN\n",10,100);
//		}
//		if(ps4.button == R1_LEFT )
//		{
//			HAL_UART_Transmit(&huart2,"R1 + LEFT\n",10,100);
//		}
//		if(ps4.button == R1_RIGHT )
//		{
//			HAL_UART_Transmit(&huart2,"R1 + RIGHT\n",11,100);
//		}
//		if(ps4.button == R1_UP )
//		{
//			HAL_UART_Transmit(&huart2,"R1 + UP\n",8,100);
//		}
//		if(ps4.button == R1_DOWN )
//		{
//			HAL_UART_Transmit(&huart2,"R1 + DOWN\n",10,100);
//		}
//	HAL_Delay(500);
	}
}

void TIM6_DAC_IRQHandler(void)
{
	led1 = !led1;
	HAL_TIM_IRQHandler(&htim6);
}


/**
 * @brief  This function is executed in case of error occurrence.
 */
void Error_Handler(void)
{


}
#ifdef  USE_FULL_ASSERT
/**
 * @brief  Reports the name of the source file and the source line number
 *         where the assert_param error has occurred.
 * @param  file: pointer to the source file name
 * @param  line: assert_param error line source number
 * @retval None
 */
void assert_failed(uint8_t *file, uint32_t line)
{
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */


/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

